import { NextResponse } from 'next/server';
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { verifyBotToken } from '@/app/(dashboard)/dashboard/lib/jwtManagement';

export async function GET(
  request: Request,
  { params }: { params: { botId: string } }
) {
  try {
    console.log('üîç Iniciando busca de detalhes do bot:', params.botId);

    const supabase = createRouteHandlerClient({ cookies });

    // Verificar autentica√ß√£o
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      console.error('‚ùå Usu√°rio n√£o autenticado');
      return NextResponse.json(
        { error: 'N√£o autorizado' },
        { status: 401 }
      );
    }

    console.log('üë§ Usu√°rio autenticado:', session.user.id);

    // Buscar detalhes do bot
    const { data: bot, error: botError } = await supabase
      .from('bots')
      .select('*')
      .eq('id', params.botId)
      .single();

    if (botError) {
      console.error('‚ùå Erro ao buscar bot:', botError);
      return NextResponse.json(
        { error: 'Erro ao buscar detalhes do bot' },
        { status: 500 }
      );
    }

    if (!bot) {
      console.error('‚ùå Bot n√£o encontrado');
      return NextResponse.json(
        { error: 'Bot n√£o encontrado' },
        { status: 404 }
      );
    }

    console.log('‚úÖ Bot encontrado com sucesso');

    // Verificar se o usu√°rio tem acesso ao bot
    const { data: userBot, error: userBotError } = await supabase
      .from('user_bots')
      .select('enabled')
      .match({
        user_id: session.user.id,
        bot_id: params.botId
      })
      .single();

    if (userBotError) {
      console.error('‚ùå Erro ao verificar acesso do usu√°rio:', userBotError);
      return NextResponse.json(
        { error: 'Erro ao verificar acesso ao bot' },
        { status: 500 }
      );
    }

    if (!userBot?.enabled) {
      console.error('‚ùå Usu√°rio n√£o tem acesso ao bot');
      return NextResponse.json(
        { error: 'Acesso n√£o permitido a este bot' },
        { status: 403 }
      );
    }

    console.log('‚úÖ Acesso do usu√°rio validado');

    return NextResponse.json(bot);
  } catch (error) {
    console.error('‚ùå Erro interno:', error);
    return NextResponse.json(
      { error: 'Erro interno ao buscar detalhes do bot' },
      { status: 500 }
    );
  }
} 