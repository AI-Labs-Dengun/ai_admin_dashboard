"use client"

import { useState } from "react"
import type { ColumnDef } from "@tanstack/react-table"
import { ArrowUpDown, MessageSquare } from "lucide-react"
import { Button } from "@/components/ui/button"
import { DataTable } from "@/components/dashboard/data-table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Textarea } from "@/components/ui/textarea"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"

// Sample data
type SupportTicket = {
  id: string
  subject: string
  createdAt: string
  status: "open" | "in-progress" | "closed"
  assignedTo: string
  description: string
  messages: {
    sender: string
    message: string
    timestamp: string
  }[]
}

const data: SupportTicket[] = [
  {
    id: "ticket-001",
    subject: "AI Agent not responding to property queries",
    createdAt: "2023-07-10T14:30:00",
    status: "open",
    assignedTo: "John Smith",
    description:
      "Our Property Assistant AI is not responding to specific questions about commercial properties. It works fine for residential queries.",
    messages: [
      {
        sender: "Sarah Jones",
        message:
          "I've been trying to use the Property Assistant to get information about office spaces, but it keeps timing out or giving generic responses.",
        timestamp: "2023-07-10T14:30:00",
      },
      {
        sender: "Support Team",
        message:
          "Thank you for reporting this issue. Could you provide an example of a specific query that's not working?",
        timestamp: "2023-07-10T15:45:00",
      },
      {
        sender: "Sarah Jones",
        message:
          "Sure, when I ask 'What's the average price per square foot for Class A office space in downtown?', it just times out.",
        timestamp: "2023-07-10T16:20:00",
      },
    ],
  },
  {
    id: "ticket-002",
    subject: "Image generation quality issues",
    createdAt: "2023-07-09T10:15:00",
    status: "in-progress",
    assignedTo: "Emma Wilson",
    description: "The property images generated by our AI have poor lighting and unrealistic proportions.",
    messages: [
      {
        sender: "David Clark",
        message:
          "The images our AI is generating for listings look unrealistic. The rooms appear stretched and the lighting is too dark.",
        timestamp: "2023-07-09T10:15:00",
      },
      {
        sender: "Support Team",
        message: "We're looking into this issue. Could you share a few examples of problematic images?",
        timestamp: "2023-07-09T11:30:00",
      },
      {
        sender: "David Clark",
        message: "I've uploaded three examples to the shared folder. The kitchen images are particularly problematic.",
        timestamp: "2023-07-09T13:45:00",
      },
      {
        sender: "Support Team",
        message: "Thank you for the examples. Our AI team is investigating the issue and will implement a fix soon.",
        timestamp: "2023-07-10T09:20:00",
      },
    ],
  },
  {
    id: "ticket-003",
    subject: "Market data appears outdated",
    createdAt: "2023-07-08T16:45:00",
    status: "closed",
    assignedTo: "Mike Brown",
    description: "The market analysis tool is showing data that appears to be several months old.",
    messages: [
      {
        sender: "Lisa Taylor",
        message: "The market trends our AI is reporting seem outdated. It's showing Q1 data even though we're in Q3.",
        timestamp: "2023-07-08T16:45:00",
      },
      {
        sender: "Support Team",
        message: "We'll check the data sources and update frequency. When did you first notice this issue?",
        timestamp: "2023-07-08T17:30:00",
      },
      {
        sender: "Lisa Taylor",
        message:
          "I noticed it yesterday when preparing a market report for clients. The pricing trends don't match current conditions.",
        timestamp: "2023-07-09T09:15:00",
      },
      {
        sender: "Support Team",
        message:
          "We've identified the issue. Our data provider changed their API and we missed some updates. This has been fixed now.",
        timestamp: "2023-07-10T11:00:00",
      },
      {
        sender: "Lisa Taylor",
        message: "Great, I can confirm the data is now current. Thank you for the quick resolution!",
        timestamp: "2023-07-10T14:20:00",
      },
    ],
  },
  {
    id: "ticket-004",
    subject: "Need additional training for specialized property types",
    createdAt: "2023-07-07T09:30:00",
    status: "open",
    assignedTo: "Unassigned",
    description: "Request for AI to be trained on historic properties and landmark buildings.",
    messages: [
      {
        sender: "John Smith",
        message:
          "Our agency specializes in historic properties, but the AI doesn't seem knowledgeable about specific considerations for these buildings.",
        timestamp: "2023-07-07T09:30:00",
      },
      {
        sender: "Support Team",
        message:
          "Thank you for bringing this to our attention. Could you elaborate on what specific knowledge you'd like the AI to have?",
        timestamp: "2023-07-07T11:15:00",
      },
      {
        sender: "John Smith",
        message:
          "We need it to understand historic designation categories, preservation requirements, tax incentives for restoration, and common structural issues in pre-1900 buildings.",
        timestamp: "2023-07-07T13:40:00",
      },
    ],
  },
  {
    id: "ticket-005",
    subject: "AI response time degradation",
    createdAt: "2023-07-06T13:20:00",
    status: "in-progress",
    assignedTo: "Emma Wilson",
    description: "AI responses have become noticeably slower over the past week.",
    messages: [
      {
        sender: "Mike Brown",
        message: "Our agents have noticed that AI responses are taking 3-4 seconds longer than they did last week.",
        timestamp: "2023-07-06T13:20:00",
      },
      {
        sender: "Support Team",
        message:
          "We're monitoring the system performance. Have you noticed this at specific times of day or with particular types of queries?",
        timestamp: "2023-07-06T14:30:00",
      },
      {
        sender: "Mike Brown",
        message:
          "It seems worse during peak hours (10am-2pm) and especially with complex queries that involve market analysis.",
        timestamp: "2023-07-06T15:45:00",
      },
      {
        sender: "Support Team",
        message:
          "We've identified increased load on our servers. We're scaling up capacity and optimizing the query handling. You should see improvement within 24 hours.",
        timestamp: "2023-07-07T10:00:00",
      },
    ],
  },
]

export default function SupportTicketsPage() {
  const [selectedTicket, setSelectedTicket] = useState<SupportTicket | null>(null)
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [replyText, setReplyText] = useState("")

  const columns: ColumnDef<SupportTicket>[] = [
    {
      accessorKey: "subject",
      header: "Subject",
      cell: ({ row }) => {
        const subject = row.getValue("subject") as string
        return <div className="font-medium">{subject}</div>
      },
    },
    {
      accessorKey: "createdAt",
      header: ({ column }) => {
        return (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
            className="p-0 hover:bg-transparent"
          >
            Created At
            <ArrowUpDown className="ml-2 h-4 w-4" />
          </Button>
        )
      },
      cell: ({ row }) => {
        const date = new Date(row.getValue("createdAt"))
        return <div>{date.toLocaleString()}</div>
      },
    },
    {
      accessorKey: "status",
      header: "Status",
      cell: ({ row }) => {
        const status = row.getValue("status") as string

        return (
          <Badge variant={status === "open" ? "default" : status === "in-progress" ? "secondary" : "outline"}>
            {status}
          </Badge>
        )
      },
    },
    {
      accessorKey: "assignedTo",
      header: "Assigned To",
      cell: ({ row }) => {
        const assignedTo = row.getValue("assignedTo") as string
        return <div>{assignedTo}</div>
      },
    },
    {
      id: "actions",
      cell: ({ row }) => {
        const ticket = row.original

        return (
          <Button
            variant="outline"
            size="sm"
            className="h-8 gap-1"
            onClick={() => {
              setSelectedTicket(ticket)
              setIsDialogOpen(true)
            }}
          >
            <MessageSquare className="h-4 w-4" />
            View / Reply
          </Button>
        )
      },
    },
  ]

  const handleReply = () => {
    // In a real app, this would send the reply to the backend
    console.log("Replying to ticket:", selectedTicket?.id, "with:", replyText)
    setReplyText("")
    // Close the dialog or keep it open as needed
    // setIsDialogOpen(false)
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Support Tickets</h1>
        <p className="text-muted-foreground">Manage and respond to user support requests</p>
      </div>

      <Tabs defaultValue="all" className="space-y-4">
        <TabsList>
          <TabsTrigger value="all">All Tickets</TabsTrigger>
          <TabsTrigger value="open">Open</TabsTrigger>
          <TabsTrigger value="in-progress">In Progress</TabsTrigger>
          <TabsTrigger value="closed">Closed</TabsTrigger>
        </TabsList>

        <TabsContent value="all">
          <Card>
            <CardHeader>
              <CardTitle>All Support Tickets</CardTitle>
            </CardHeader>
            <CardContent>
              <DataTable columns={columns} data={data} searchColumn="subject" searchPlaceholder="Search tickets..." />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="open">
          <Card>
            <CardHeader>
              <CardTitle>Open Tickets</CardTitle>
            </CardHeader>
            <CardContent>
              <DataTable
                columns={columns}
                data={data.filter((ticket) => ticket.status === "open")}
                searchColumn="subject"
                searchPlaceholder="Search open tickets..."
              />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="in-progress">
          <Card>
            <CardHeader>
              <CardTitle>In Progress Tickets</CardTitle>
            </CardHeader>
            <CardContent>
              <DataTable
                columns={columns}
                data={data.filter((ticket) => ticket.status === "in-progress")}
                searchColumn="subject"
                searchPlaceholder="Search in-progress tickets..."
              />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="closed">
          <Card>
            <CardHeader>
              <CardTitle>Closed Tickets</CardTitle>
            </CardHeader>
            <CardContent>
              <DataTable
                columns={columns}
                data={data.filter((ticket) => ticket.status === "closed")}
                searchColumn="subject"
                searchPlaceholder="Search closed tickets..."
              />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>{selectedTicket?.subject}</DialogTitle>
            <DialogDescription>
              Ticket #{selectedTicket?.id} • {selectedTicket?.status}
            </DialogDescription>
          </DialogHeader>

          {selectedTicket && (
            <>
              <div className="space-y-4">
                <div className="bg-muted p-4 rounded-md">
                  <h3 className="text-sm font-medium mb-2">Description</h3>
                  <p className="text-sm">{selectedTicket.description}</p>
                </div>

                <div className="space-y-4">
                  <h3 className="text-sm font-medium">Conversation</h3>

                  {selectedTicket.messages.map((message, index) => (
                    <div key={index} className="flex gap-4">
                      <Avatar>
                        <AvatarFallback>
                          {message.sender
                            .split(" ")
                            .map((n) => n[0])
                            .join("")}
                        </AvatarFallback>
                      </Avatar>
                      <div className="space-y-1">
                        <div className="flex items-center gap-2">
                          <span className="text-sm font-medium">{message.sender}</span>
                          <span className="text-xs text-muted-foreground">
                            {new Date(message.timestamp).toLocaleString()}
                          </span>
                        </div>
                        <p className="text-sm">{message.message}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="space-y-2">
                <h3 className="text-sm font-medium">Reply</h3>
                <Textarea
                  placeholder="Type your reply here..."
                  value={replyText}
                  onChange={(e) => setReplyText(e.target.value)}
                  rows={4}
                />
              </div>

              <DialogFooter>
                <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
                  Cancel
                </Button>
                <Button onClick={handleReply} disabled={!replyText.trim()}>
                  Send Reply
                </Button>
              </DialogFooter>
            </>
          )}
        </DialogContent>
      </Dialog>
    </div>
  )
}
